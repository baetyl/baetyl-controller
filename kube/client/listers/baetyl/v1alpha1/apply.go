/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/baetyl/baetyl-controller/kube/apis/baetyl/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApplyLister helps list Applies.
// All objects returned here must be treated as read-only.
type ApplyLister interface {
	// List lists all Applies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Apply, err error)
	// Applies returns an object that can list and get Applies.
	Applies(namespace string) ApplyNamespaceLister
	ApplyListerExpansion
}

// applyLister implements the ApplyLister interface.
type applyLister struct {
	indexer cache.Indexer
}

// NewApplyLister returns a new ApplyLister.
func NewApplyLister(indexer cache.Indexer) ApplyLister {
	return &applyLister{indexer: indexer}
}

// List lists all Applies in the indexer.
func (s *applyLister) List(selector labels.Selector) (ret []*v1alpha1.Apply, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Apply))
	})
	return ret, err
}

// Applies returns an object that can list and get Applies.
func (s *applyLister) Applies(namespace string) ApplyNamespaceLister {
	return applyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApplyNamespaceLister helps list and get Applies.
// All objects returned here must be treated as read-only.
type ApplyNamespaceLister interface {
	// List lists all Applies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Apply, err error)
	// Get retrieves the Apply from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Apply, error)
	ApplyNamespaceListerExpansion
}

// applyNamespaceLister implements the ApplyNamespaceLister
// interface.
type applyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Applies in the indexer for a given namespace.
func (s applyNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Apply, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Apply))
	})
	return ret, err
}

// Get retrieves the Apply from the indexer for a given namespace and name.
func (s applyNamespaceLister) Get(name string) (*v1alpha1.Apply, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apply"), name)
	}
	return obj.(*v1alpha1.Apply), nil
}
